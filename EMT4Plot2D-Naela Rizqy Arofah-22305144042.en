% * EMT untuk Plot2D
% 
% NAELA RIZQY AROFAH
%% 22305144042
%% MATEMATIKA B
%% ---
% 
% Notebook ini menjelaskan tentang cara menggambar berbagaikurva dan
% grafik 2D dengan software EMT. EMT menyediakan fungsi plot2d() untuk
% menggambar berbagai kurva dan grafik dua dimensi (2D).
% 
% ** Plot Dasar
% 
% Ada fungsi plot yang sangat mendasar. Terdapat koordinat layar yang
% selalu berkisar antara 0 hingga 1024 di setiap sumbu,
%% tidak peduli apakah layarnya berbentuk persegi atau tidak.  Semut
% terdapat koordinat plot, yang dapat diatur dengan setplot(). Pemetaan
% antar koordinat bergantung pada jendela plot saat ini. Misalnya,
% shrinkwindow() default memberikan ruang untuk
%% label sumbu dan judul plot.
% 
% Dalam contoh ini, kita hanya menggambar beberapa garis acak dengan
% berbagai warna. Untuk rincian tentang fungsi-fungsi ini, pelajari
% fungsi inti EMT.
>clg; // clear screen
>window(0,0,1024,1024); // use all of the window
>setplot(0,1,0,1); // set plot coordinates
>hold on; // start overwrite mode
>n=100; X=random(n,2); Y=random(n,2);  // get random points
>colors=rgb(random(n),random(n),random(n)); // get random colors
>loop 1 to n; color(colors[#]); plot(X[#],Y[#]); end; // plot
>hold off; // end overwrite mode
>insimg; // insert to notebook
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-001.png
>reset;
% Grafik perlu ditahan, karena perintah plot() akan menghapus jendela
% plot.
% 
% 
% ntuk menghapus semua yang kami lakukan, kami menggunakan reset().
% 
% 
% ntuk menampilkan gambar hasil plot di layar notebook, perintah
% plot2d() dapat diakhiri dengan titik dua (:). Cara lain adalah
% perintah plot2d() diakhiri dengan titik koma (;), kemudian menggunakan
% perintah insimg() untuk menampilkan gambar hasil plot.
% 
% Untuk contoh lain, kita menggambar plot sebagai sisipan di plot lain.
% Hal ini dilakukan dengan mendefinisikan jendela plot yang lebih kecil.
%% Perhatikan bahwa jendela ini tidak memberikan ruang untuk label sumbu
% di luar jendela plot. Kita harus menambahkan beberapa
%% margin untuk ini sesuai kebutuhan. Perhatikan bahwa kita menyimpan dan
% memulihkan jendela penuh, dan menahan plot saat ini
%% sementara kita memplot inset.
>plot2d("x^3-x");
>xw=200; yw=100; ww=300; hw=300;
>ow=window();
>window(xw,yw,xw+ww,yw+hw);
>hold on;
>barclear(xw-50,yw-10,ww+60,ww+60);
>plot2d("x^4-x",grid=6):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-002.png
>hold off;
>window(ow);
% Plot dengan banyak gambar dicapai dengan cara yang sama. Ada fungsi
% utilitas figure() untuk ini.
% 
% ** Aspek Plot
% 
% Plot default menggunakan jendela plot persegi. Anda dapat mengubahnya
% dengan fungsi aspek(). Jangan lupa untuk mengatur
%% ulang aspeknya nanti. Anda juga dapat mengubah default ini di menu
% dengan "Set Aspect" ke rasio aspek tertentu atau ke ukuran
%% jendela grafik saat ini
% 
% Tapi Anda juga bisa mengubahnya untuk satu plot. Untuk ini, ukuran
% area plot saat ini diubah, dan jendela diatur sehingga label
%% memiliki cukup ruang.
>aspect(2); // rasio panjang dan lebar 2:1
>plot2d(["sin(x)","cos(x)"],0,2pi):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-003.png
>aspect();
>reset;
% Fungsi reset() mengembalikan default plot termasuk rasio aspek.
% 
% * Plot 2D di Euler
% 
% EMT Math Toolbox memiliki plot dalam 2D, baik untuk data maupun
% fungsi. EMT menggunakan fungsi plot2d. Fungsi ini dapat memplot fungsi
% dan data.
% 
% Dimungkinkan untuk membuat plot di Maxima menggunakan Gnuplot atau
% dengan Python menggunakan Math Plot Lib.
% 
% Euler dapat memplot plot 2D dari :
% 
% - ekspresi
%% - fungsi, variabel, atau kurva berparameter,
%% - vektor nilai x-y,
%% - clouds of points in the plane,
%% - kurva implisit dengan level atau wilayah level.
%% - fungsi kompleks
% 
% Gaya plot mencakup berbagai gaya untuk garis dan titik, plot batang,
% dan plot berbayang.
% 
% * Plot Ekspresi atau Variabel
% 
% Ekspresi tunggal dalam "x" (misalnya "4*x^2") atau nama suatu fungsi
% (misalnya "f") menghasilkan grafik fungsi tersebut.
% 
% Berikut adalah contoh paling dasar, yang menggunakan rentang default
% dan menetapkan rentang y yang tepat agar sesuai dengan plot
%% fungsinya.
% 
% atatan: Jika Anda mengakhiri baris perintah dengan titik dua ":", plot
% akan dimasukkan ke dalam jendela teks. Jika tidak, tekan
%% TAB untuk melihat plot jika jendela plot tertutup.
>plot2d("x^2"):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-004.png
>aspect(1.5); plot2d("x^3-x"):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-005.png
>a:=5.6; plot2d("exp(-a*x^2)/a"); insimg(30); // menampilkan gambar hasil plot setinggi 25 baris
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-006.png
% Dari beberapa contoh sebelumnya Anda dapat melihat bahwa aslinya
% gambar plot menggunakan sumbu X dengan rentang nilai dari -2 sampai
% dengan 2. Untuk mengubah rentang nilai X dan Y, Anda dapat menambahkan
% nilai-nilai batas X (dan Y) di belakang ekspresi yang digambar.
% 
% Rentang plot diatur dengan parameter yang ditetapkan sebagai berikut :
% 
% - a,b: rentang x(default -2,2)
%% - c,d: rentang y (default: scale with values)
%% - r: alternatifnya radius di sekitar pusat plot
%% - cx,cy: koordinat pusat plot (default 0,0)
>plot2d("x^3-x",-1,2):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-007.png
>plot2d("sin(x)",-2*pi,2*pi): // plot sin(x) pada interval [-2pi, 2pi]
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-008.png
>plot2d("cos(x)","sin(3*x)",xmin=0,xmax=2pi):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-009.png
% Alternatif untuk titik dua adalah perintah insimg(baris), yang
% menyisipkan plot yang menempati sejumlah baris teks tertentu.
% 
% 
% alam opsi, plot dapat diatur agar muncul
% 
% - in a separate resizable window,
%% - di jendela buku catatan
% 
% Lebih banyak gaya dapat dicapai dengan perintah plot tertentu.
% 
% 
% agaimanapun, tekan tombol tabulator untuk melihat plotnya, jika
% tersembunyi.
% 
% Untuk membagi jendela menjadi beberapa plot, gunakan perintah
% figure(). Dalam contoh, kita memplot x^1 hingga x^4 menjadi 4 bagian
% jendela. gambar(0) mengatur ulang jendela default.
% 
% Gaya plot mencakup berbagai gaya untuk garis dan titik, plot batang,
% dan plot berbayang.
% 
% * Plot Ekspresi atau Variabel
% 
% Ekspresi tunggal dalam "x" (misalnya "4*x^2") atau nama suatu fungsi
% (misalnya "f") menghasilkan grafik fungsi tersebut.
% 
% Berikut adalah contoh paling dasar, yang menggunakan rentang default
% dan menetapkan rentang y yang tepat agar sesuai dengan plot
%% fungsinya.
% 
% atatan: Jika Anda mengakhiri baris perintah dengan titik dua ":", plot
% akan dimasukkan ke dalam jendela teks. Jika tidak, tekan
%% TAB untuk melihat plot jika jendela plot tertutup.
>reset;
>figure(2,2); ...
>for n=1 to 4; figure(n); plot2d("x^"+n); end; ...
>figure(0):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-010.png
% Di plot2d(), ada gaya alternatif yang tersedia dengan grid=x. Untuk
% gambaran umum, kami menampilkan berbagai gaya kisi dalam satu gambar
% (lihat di bawah untuk perintah figure()). Gaya grid=0 tidak
% disertakan. Ini tidak menunjukkan kisi dan bingkai.
% 
% gaya dapat dicapai dengan perintah plot tertentu.
% 
% 
% Bagaimanapun, tekan tombol tabulator untuk melihat plotnya, jika
% tersembunyi.
% 
% Untuk membagi jendela menjadi beberapa plot, gunakan perintah
% figure(). Dalam contoh, kita memplot x^1 hingga x^4 menjadi 4 bagian
% jendela. gambar(0) mengatur ulang jendela default.
% 
% Gaya plot mencakup berbagai gaya untuk garis dan titik, plot batang,
% dan plot berbayang.
% 
% * Plot Ekspresi atau Variabel
% 
% Ekspresi tunggal dalam "x" (misalnya "4*x^2") atau nama suatu fungsi
% (misalnya "f") menghasilkan grafik fungsi tersebut.
% 
% Berikut adalah contoh paling dasar, yang menggunakan rentang default
% dan menetapkan rentang y yang tepat agar sesuai dengan plot
%% fungsinya.
% 
% Catatan: Jika Anda mengakhiri baris perintah dengan titik dua ":",
% plot akan dimasukkan ke dalam jendela teks. Jika tidak, tekan
%% TAB untuk melihat plot jika jendela plot tertutup.
>figure(3,3); ...
>for k=1:9; figure(k); plot2d("x^3-x",-2,1,grid=k); end; ...
>figure(0):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-011.png
% Jika argumen pada plot2d() adalah ekspresi yang diikuti oleh empat
% angka, angka-angka tersebut adalah rentang x dan y untuk plot
% tersebut.
% 
% Alternatifnya, a, b, c, d dapat ditentukan sebagai parameter yang
% ditetapkan sebagai a=... dll.
% 
% Pada contoh berikut, kita mengubah gaya kisi, menambahkan label, dan
% menggunakan label vertikal untuk sumbu y.
%% ihat plotnya, jika tersembunyi.
% 
% Untuk membagi jendela menjadi beberapa plot, gunakan perintah
% figure(). Dalam contoh, kita memplot x^1 hingga x^4 menjadi 4 bagian
% jendela. gambar(0) mengatur ulang jendela default.
% 
% Gaya plot mencakup berbagai gaya untuk garis dan titik, plot batang,
% dan plot berbayang.
% 
% * Plot Ekspresi atau Variabel
% 
% Ekspresi tunggal dalam "x" (misalnya "4*x^2") atau nama suatu fungsi
% (misalnya "f") menghasilkan grafik fungsi tersebut.
% 
% Berikut adalah contoh paling dasar, yang menggunakan rentang default
% dan menetapkan rentang y yang tepat agar sesuai dengan plot
%% fungsinya.
% 
% Catatan: Jika Anda mengakhiri baris perintah dengan titik dua ":",
% plot akan dimasukkan ke dalam jendela teks. Jika tidak, tekan
%% TAB untuk melihat plot jika jendela plot tertutup.
>aspect(1.5); plot2d("sin(x)",0,2pi,-1.2,1.2,grid=3,xl="x",yl="sin(x)"):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-012.png
>plot2d("sin(x)+cos(2*x)",0,4pi):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-013.png
% Gambar yang dihasilkan dengan memasukkan plot ke dalam jendela teks
% disimpan dalam direktori yang sama dengan buku catatan, secara default
% dalam subdirektori bernama "gambar". Mereka juga digunakan oleh ekspor
% HTML.
% 
% Anda cukup menandai gambar apa saja dan menyalinnya ke clipboard
% dengan Ctrl-C. Tentu saja, Anda juga dapat mengekspor grafik saat ini
% dengan fungsi di menu File.
% 
% Fungsi atau ekspresi di plot2d dievaluasi secara adaptif. Agar lebih
% cepat, nonaktifkan plot adaptif dengan <adaptive dan tentukan jumlah
% subinterval dengan n=... Hal ini hanya diperlukan dalam kasus yang
% jarang terjadi.
>plot2d("sign(x)*exp(-x^2)",-1,1,<adaptive,n=10000):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-014.png
>plot2d("x^x",r=1.2,cx=1,cy=1):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-015.png
% Fungsi atau ekspresi di plot2d dievaluasi secara adaptif. Agar lebih
% cepat, nonaktifkan plot adaptif dengan <adaptive dan tentukan jumlah
% subinterval dengan n=... Hal ini hanya diperlukan dalam kasus yang
% jarang terjadi.
>plot2d("log(x)",-0.1,2):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-016.png
% Parameter square=true (atau >square) memilih rentang y secara otomatis
% sehingga hasilnya adalah jendela plot persegi.
%% Perhatikan bahwa secara default, Euler menggunakan spasi persegi di
% dalam jendela plot.
>plot2d("x^3-x",>square):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-017.png
>plot2d(''integrate("sin(x)*exp(-x^2)",0,x)'',0,2): // plot integral
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-018.png
% Jika Anda memerlukan lebih banyak ruang untuk label y, panggil
% shrinkwindow() dengan parameter lebih kecil, atau tetapkan nilai
% positif untuk "lebih kecil" di plot2d().
>plot2d("gamma(x)",1,10,yl="y-values",smaller=6,<vertical):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-019.png
% Ekspresi simbolik juga dapat digunakan karena disimpan sebagai
% ekspresi string sederhana.
%% ter lebih kecil, atau tetapkan nilai positif untuk "lebih kecil" di
% plot2d().
>x=linspace(0,2pi,1000); plot2d(sin(5x),cos(7x)):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-020.png
>a:=5.6; expr &= exp(-a*x^2)/a; // define expression
>plot2d(expr,-2,2): // plot from -2 to 2
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-021.png
>plot2d(expr,r=1,thickness=2): // plot in a square around (0,0)
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-022.png
>plot2d(&diff(expr,x),>add,style="--",color=red): // add another plot
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-023.png
>plot2d(&diff(expr,x,2),a=-2,b=2,c=-2,d=1): // plot in rectangle
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-024.png
>plot2d(&diff(expr,x),a=-2,b=2,>square): // keep plot square
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-025.png
>plot2d("x^2",0,1,steps=1,color=red,n=10):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-026.png
>plot2d("x^2",>add,steps=2,color=blue,n=10):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-027.png
% * Fungsi dalam satu Parameter
% 
% Fungsi plot yang paling penting untuk plot planar adalah plot2d().
% Fungsi ini diimplementasikan dalam bahasa Euler di file
%% "plot.e", yang dimuat di awal program.
% 
% Berikut beberapa contoh penggunaan suatu fungsi. Seperti biasa di EMT,
% fungsi yang berfungsi untuk fungsi atau ekspresi lain, Anda dapat
% meneruskan parameter tambahan (selain x) yang bukan merupakan variabel
% global ke fungsi dengan parameter titik koma atau dengan kumpulan
% panggilan.
>function f(x,a) := x^2/a+a*x^2-x; // define a function
>a=0.3; plot2d("f",0,1;a): // plot with a=0.3
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-028.png
>plot2d("f",0,1;0.4): // plot with a=0.4
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-029.png
>plot2d({{"f",0.2}},0,1): // plot with a=0.2
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-030.png
>plot2d({{"f(x,b)",b=0.1}},0,1): // plot with 0.1
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-031.png
>function f(x) := x^3-x; ...
>plot2d("f",r=1):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-032.png
% Here is a summary of the accepted functions
% 
% - expressions or symbolic expressions in x
%% - functions or symbolic functions by name as "f"
%% - symbolic functions just by the name f
% 
% dengan nama f Fungsi plot2d() juga menerima
%% fungsi simbolik. Untuk fungsi simbolik, namanya saja yang berfungsi.
>function f(x) &= diff(x^x,x)

                            x
                           x  (log(x) + 1)

>plot2d(f,0,2):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-033.png
% Of course, for expressions or symbolic expressions the name of the variable is enough to
% plot them.
>expr &= sin(x)*exp(-x)

                              - x
                             E    sin(x)

>plot2d(expr,0,3pi):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-034.png
>function f(x) &= x^x;
>plot2d(f,r=1,cx=1,cy=1,color=blue,thickness=2);
>plot2d(&diff(f(x),x),>add,color=red,style="-.-"):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-035.png
% 
% Untuk gaya garis ada berbagai pilihan. 
% 
% - style="...". Select from "-", "--", "-.", ".", ".-.", "-.-".
%% - color: See below for colors.
%% - thickness: Default is 1.
% 
% Warna dapat dipilih sebagai salah satu warna default, atau sebagai
% warna RGB. 
% 
% 
%  0..15: the default color indices.
%% - color constants: white, black, red, green, blue, cyan, olive,
% lightgray, gray, darkgray, orange, lightgreen, turquoise, lightblue,
% lightorange, yellow
%% - rgb(red,green,blue): parameters are reals in [0,1].
>plot2d("exp(-x^2)",r=2,color=red,thickness=3,style="--"):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-036.png
% Here is a view of the predefined colors of EMT.
>aspect(2); columnsplot(ones(1,16),lab=0:15,grid=0,color=0:15):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-037.png
% But you can use any color.
>columnsplot(ones(1,16),grid=0,color=rgb(0,0,linspace(0,1,15))):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-038.png
% * Menggambar Beberapa Kurva pada bidang koordinat yang sama
% 
% Plot lebih dari satu fungsi (multiple function) ke dalam satu jendela
% dapat dilakukan dengan berbagai cara. Salah satu metodenya adalah
% menggunakan >add untuk beberapa panggilan ke plot2d secara
% keseluruhan, kecuali panggilan pertama. Kami telah menggunakan fitur
% ini pada contoh di atas.
>aspect(); plot2d("cos(x)",r=2,grid=6); plot2d("x",style=".",>add):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-039.png
>aspect(1.5); plot2d("sin(x)",0,2pi); plot2d("cos(x)",color=blue,style="--",>add):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-040.png
% Salah satu kegunaan >add adalah untuk menambahkan titik pada kurva.
>plot2d("sin(x)",0,pi); plot2d(2,sin(2),>points,>add):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-041.png
% Kita tambahkan titik perpotongan dengan label (pada posisi "cl" untuk
% kiri tengah), dan masukkan hasilnya ke dalam buku catatan.
%% Kami juga menambahkan judul pada plot.
>plot2d(["cos(x)","x"],r=1.1,cx=0.5,cy=0.5, ...
>  color=[black,blue],style=["-","."], ...
>  grid=1);
>x0=solve("cos(x)-x",1);  ...
>  plot2d(x0,x0,>points,>add,title="Intersection Demo");  ...
>  label("cos(x) = x",x0,x0,pos="cl",offset=20):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-042.png
% Dalam demo berikut, kita memplot fungsi sin(x)=sin(x)/x dan ekspansi
% Taylor ke-8 dan ke-16. Kami menghitung perluasan ini menggunakan
% Maxima melalui ekspresi simbolik.
% 
% Plot ini dilakukan dalam perintah multi-baris berikut dengan tiga
% panggilan ke plot2d(). Yang kedua dan ketiga memiliki kumpulan
%% tanda >add, yang membuat plot menggunakan rentang sebelumnya.
% 
% 
% kami menambahkan kotak label yang menjelaskan fungsinya.
>$taylor(sin(x)/x,x,0,4)
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-043.png
% // latex: \frac{x^4}{120}-\frac{x^2}{6}+1
>plot2d("sinc(x)",0,4pi,color=green,thickness=2); ...
>  plot2d(&taylor(sin(x)/x,x,0,8),>add,color=blue,style="--"); ...
>  plot2d(&taylor(sin(x)/x,x,0,16),>add,color=red,style="-.-"); ...
>  labelbox(["sinc","T8","T16"],styles=["-","--","-.-"], ...
>    colors=[black,blue,red]):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-044.png
% In the following example, we generate the Bernstein-Polynomials.
% 
% latex: B_i(x) = \binom{n}{i} x^i (1-x)^{n-i}
>plot2d("(1-x)^10",0,1); // plot first function
>for i=1 to 10; plot2d("bin(10,i)*x^i*(1-x)^(10-i)",>add); end;
>insimg;
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-045.png
% Cara kedua adalah dengan menggunakan pasangan matriks bernilai x dan
% matriks bernilai y yang berukuran sama.
% 
% 
% Kami menghasilkan matriks nilai dengan satu Polinomial Bernstein di
% setiap baris. Untuk ini, kita cukup menggunakan vektor kolom i.
%% Lihat pendahuluan tentang bahasa matriks untuk mempelajari lebih
% detail.
>x=linspace(0,1,500);
>n=10; k=(0:n)'; // n is row vector, k is column vector
>y=bin(n,k)*x^k*(1-x)^(n-k); // y is a matrix then
>plot2d(x,y):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-046.png
% Note that the color parameter can be a vector. Then each color is used for each row of
% the matrix.
>x=linspace(0,1,200); y=x^(1:10)'; plot2d(x,y,color=1:10):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-047.png
% Another method is using a vector of expressions (strings). You can then use a
% color array, an array of styles, and an array of thicknesses of the same length.
>plot2d(["sin(x)","cos(x)"],0,2pi,color=4:5): 
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-048.png
>plot2d(["sin(x)","cos(x)"],0,2pi): // plot vector of expressions
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-049.png
% We can get such a vector from Maxima using makelist() and mxm2str().  
>v &= makelist(binomial(10,i)*x^i*(1-x)^(10-i),i,0,10) // make list

               10            9              8  2             7  3
       [(1 - x)  , 10 (1 - x)  x, 45 (1 - x)  x , 120 (1 - x)  x , 
           6  4             5  5             4  6             3  7
210 (1 - x)  x , 252 (1 - x)  x , 210 (1 - x)  x , 120 (1 - x)  x , 
          2  8              9   10
45 (1 - x)  x , 10 (1 - x) x , x  ]

>mxm2str(v) // get a vector of strings from the symbolic vector
(1-x)^10
10*(1-x)^9*x
45*(1-x)^8*x^2
120*(1-x)^7*x^3
210*(1-x)^6*x^4
252*(1-x)^5*x^5
210*(1-x)^4*x^6
120*(1-x)^3*x^7
45*(1-x)^2*x^8
10*(1-x)*x^9
x^10
>plot2d(mxm2str(v),0,1): // plot functions
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-050.png
% Alternatif lain adalah dengan menggunakan bahasa matriks Euler.
% 
% Jika suatu ekspresi menghasilkan matriks fungsi, dengan satu fungsi di
% setiap baris, semua fungsi tersebut akan diplot ke dalam satu plot.
>n=(1:10)'; plot2d("x^n",0,1,color=1:10):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-051.png
% Expressions and one-line functions can see global variables.
% 
% If you cannot use a global variable, you need to use a function with an extra parameter,
% and pass this parameter as a semicolon parameter.
% 
% Take care, to put all assigned parameters to the end of the plot2d command. In the
% example we pass a=5 to the function f, which we plot from -10 to 10.
>function f(x,a) := 1/a*exp(-x^2/a); ...
>plot2d("f",-10,10;5,thickness=2,title="a=5"):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-052.png
% Alternatively, use a collection with the function name and all extra parameters. These
% special lists are called call collections, and that is the preferred way to pass
% arguments to a function which is itself passed as an argument to another function.
% 
% In the following example, we use a loop to plot several functions (see the tutorial
% about programming for loops).
>plot2d({{"f",1}},-10,10); ...
>for a=2:10; plot2d({{"f",a}},>add); end:
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-053.png
% We could achieve the same result in the following way using the matrix language of EMT.
% Each row of the matrix f(x,a) is one function. Moreover, we can set colors for each row
% of the matrix. Double click on the function getspectral() for an explanation.
>x=-10:0.01:10; a=(1:10)'; plot2d(x,f(x,a),color=getspectral(a/10)):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-054.png
% ** Label Teks
% 
% Dekorasi sederhana dapat : 
% 
% 
%  a title with title="..."
%% - x- and y-labels with xl="...", yl="..."
%% - another text label with label("...",x,y)
% 
% Perintah label akan memplot ke plot saat ini pada koordinat plot
% (x,y). Hal ini memerlukan argumen posisional.
>plot2d("x^3-x",-1,2,title="y=x^3-x",yl="y",xl="x"):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-055.png
>expr := "log(x)/x"; ...
>  plot2d(expr,0.5,5,title="y="+expr,xl="x",yl="y"); ...
>  label("(1,0)",1,0); label("Max",E,expr(E),pos="lc"):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-056.png
% Ada juga fungsi labelbox(), yang dapat menampilkan fungsi dan teks.
% Dibutuhkan vektor string dan warna, satu item untuk setiap
%% fungsi.
>function f(x) &= x^2*exp(-x^2);  ...
>plot2d(&f(x),a=-3,b=3,c=-1,d=1);  ...
>plot2d(&diff(f(x),x),>add,color=blue,style="--"); ...
>labelbox(["function","derivative"],styles=["-","--"], ...
>   colors=[black,blue],w=0.4):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-057.png
% Kotak ini berlabuh di kanan atas secara default, tetapi >kiri berlabuh
% di kiri atas. Anda dapat memindahkannya ke tempat mana pun yang Anda
% suka. Posisi jangkar berada di pojok kanan atas kotak, dan angkanya
% merupakan pecahan dari ukuran jendela grafis. Lebarnya otomatis.
% 
% Untuk plot titik, kotak label juga berfungsi. Tambahkan parameter >
% points, atau vektor bendera, satu untuk setiap label.
% 
% 
% ada contoh berikut, hanya ada satu fungsi. Jadi kita bisa menggunakan
% string sebagai pengganti vektor string. Kami mengatur warna teks
% menjadi hitam untuk contoh ini.
>n=10; plot2d(0:n,bin(n,0:n),>addpoints); ...
>labelbox("Binomials",styles="[]",>points,x=0.1,y=0.1, ...
>tcolor=black,>left):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-058.png
% Gaya plot ini juga tersedia di statplot(). Seperti di plot2d() warna
% dapat diatur untuk setiap baris plot. Masih banyak lagi plot khusus
% untuk keperluan statistik (lihat tutorial tentang statistik).
>statplot(1:10,random(2,10),color=[red,blue]):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-059.png
% A similar feature is the function textbox().
% 
% Lebarnya secara default adalah lebar maksimal baris teks. Tapi itu
% bisa diatur oleh pengguna juga.
>function f(x) &= exp(-x)*sin(2*pi*x); ...
>plot2d("f(x)",0,2pi); ...
>textbox(latex("\text{Example of a damped oscillation}\ f(x)=e^{-x}sin(2\pi x)"),w=0.85):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-060.png
% Label teks, judul, kotak label, dan teks lainnya dapat berisi string
% Unicode (lihat sintaks EMT untuk mengetahui lebih lanjut tentang
% string Unicode).
>plot2d("x^3-x",title=u"x &rarr; x&sup3; - x"):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-061.png
% The labels on the x- and y-axis can be vertical, as well as the axis.
>plot2d("sinc(x)",0,2pi,xl="x",yl=u"x &rarr; sinc(x)",>vertical):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-062.png
% ** LaTeX
% 
% Anda juga dapat memplot rumus LaTeX jika Anda telah menginstal sistem
% LaTeX. Saya merekomendasikan MiKTeX. Jalur ke biner "lateks" dan
% "dvipng" harus berada di jalur sistem, atau Anda harus mengatur LaTeX
% di opsi menu.
% 
% Perhatikan, penguraian LaTeX lambat. Jika Anda ingin menggunakan LaTeX
% dalam plot animasi, Anda harus memanggil latex() sebelum loop satu
% kali dan menggunakan hasilnya (gambar dalam matriks RGB).
% 
% Pada plot berikut, kami menggunakan LaTeX untuk label x dan y, label,
% kotak label, dan judul plot.
>plot2d("exp(-x)*sin(x)/x",a=0,b=2pi,c=0,d=1,grid=6,color=blue, ...
>  title=latex("\text{Function $\Phi$}"), ...
>  xl=latex("\phi"),yl=latex("\Phi(\phi)")); ...
>textbox( ...
>  latex("\Phi(\phi) = e^{-\phi} \frac{\sin(\phi)}{\phi}"),x=0.8,y=0.5); ...
>label(latex("\Phi",color=blue),1,0.4):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-063.png
% Seringkali, kita menginginkan spasi dan label teks yang tidak
% konformal pada sumbu x. Kita bisa menggunakan xaxis() dan yaxis()
% seperti yang akan kita tunjukkan nanti.
% 
% Cara termudah adalah membuat plot kosong dengan bingkai menggunakan
% grid=4, lalu menambahkan grid dengan ygrid() dan xgrid(). Pada contoh
% berikut, kami menggunakan tiga string LaTeX untuk label pada sumbu x
% dengan xtick().
>plot2d("sinc(x)",0,2pi,grid=4,<ticks); ...
>ygrid(-2:0.5:2,grid=6); ...
>xgrid([0:2]*pi,<ticks,grid=6);  ...
>xtick([0,pi,2pi],["0","\pi","2\pi"],>latex):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-064.png
% Of course, functions can also be used.
>function map f(x) ...
$if x>0 then return x^4
$else return x^2
$endif
$endfunction
% Parameter "peta" membantu menggunakan fungsi untuk vektor. Untuk
% plotnya, itu tidak diperlukan. Namun untuk menunjukkan bahwa
% vektorisasi bermanfaat, kami menambahkan beberapa poin penting ke plot
% di x=-1, x=0, dan x=1.
% 
% Pada plot berikut, kami juga memasukkan beberapa kode LaTeX. Kami
% menggunakannya untuk dua label dan kotak teks. Tentu saja, Anda hanya
% dapat menggunakan LaTeX jika Anda telah menginstal LaTeX dengan benar.
% 
>plot2d("f",-1,1,xl="x",yl="f(x)",grid=6);  ...
>plot2d([-1,0,1],f([-1,0,1]),>points,>add); ...
>label(latex("x^3"),0.72,f(0.72)); ...
>label(latex("x^2"),-0.52,f(-0.52),pos="ll"); ...
>textbox( ...
>  latex("f(x)=\begin{cases} x^3 & x>0 \\ x^2 & x \le 0\end{cases}"), ...
>  x=0.7,y=0.2):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-065.png
% 
% ** Interaksi Pengguna
% 
% Saat memplot suatu fungsi atau ekspresi, parameter >pengguna
% memungkinkan pengguna untuk memperbesar dan menggeser plot dengan
% tombol kursor atau mouse. Pengguna dapat :
% 
% - memperbesar dengan + or -
%% - memindahkan plot dengan tombol kursor
%% - select a plot window with the mouse
%% - reset the view with space
%% - exit with return
% 
% spasi - keluar dengan kembali Tombol spasi akan mengatur ulang plot ke
% jendela plot asli.
% 
% Saat memplot data, flag >user hanya akan menunggu penekanan tombol.
>plot2d({{"x^3-a*x",a=1}},>user,title="Press any key!"):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-066.png
>plot2d("exp(x)*sin(x)",user=true, ...
>  title="+/- or cursor keys (return to exit)"):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-067.png
% The following demonstrates an advanced way of user interaction (see
% the tutorial about programming for details).
% 
% Fungsi bawaan mousedrag() menunggu aktivitas mouse atau keyboard. Ini
% melaporkan mouse ke bawah, gerakan mouse atau mouse ke atas, dan
% penekanan tombol. Fungsi dragpoints() memanfaatkan ini, dan
% memungkinkan pengguna menyeret titik manapun dalam plot.
% 
% 
% Kita membutuhkan fungsi plot terlebih dahulu. Misalnya, kita melakukan
% interpolasi pada 5 titik dengan polinomial. Fungsi tersebut harus
% diplot ke dalam area plot yang tetap.
>function plotf(xp,yp,select) ...
$  d=interp(xp,yp);
$  plot2d("interpval(xp,d,x)";d,xp,r=2);
$  plot2d(xp,yp,>points,>add);
$  if select>0 then
$    plot2d(xp[select],yp[select],color=red,>points,>add);
$  endif;
$  title("Drag one point, or press space or return!");
$endfunction
% Note the semicolon parameters in plot2d (d and xp), which are passed to the evaluation
% of the interp() function. Without this, we must write a function plotinterp() first,
% accessing the values globally.
% 
% Now we generate some random values, and let the user drag the points.
>t=-1:0.5:1; dragpoints("plotf",t,random(size(t))-0.5):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-068.png
% There is also a function, which plots another function depending on a vector of
% parameters, and lets the user adjust these parameters.
% 
% First we need the plot function.
>function plotf([a,b]) := plot2d("exp(a*x)*cos(2pi*b*x)",0,2pi;a,b);
% Then we need names for the parameters, initial values and a nx2 matrix of ranges,
% optionally a heading line.
%% There are interactive sliders, which can set values by the user. The function
% dragvalues() provides this.
>dragvalues("plotf",["a","b"],[-1,2],[[-2,2];[1,10]], ...
>  heading="Drag these values:",hcolor=black):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-069.png
% It is possible to restrict the dragged values to integers. For an example, we write a
% plot function, which plots a Taylor polynomial of degree n to the cosine function.
>function plotf(n) ...
$plot2d("cos(x)",0,2pi,>square,grid=6);
$plot2d(&"taylor(cos(x),x,0,@n)",color=blue,>add);
$textbox("Taylor polynomial of degree "+n,0.1,0.02,style="t",>left);
$endfunction
% Now we allow the degree n to vary from 0 to 20 in 20 stops. The result of dragvalues()
% is used to plot the sketch with this n, and to insert the plot into the notebook.
>nd=dragvalues("plotf","degree",2,[0,20],20,y=0.8, ...
>   heading="Drag the value:"); ...
>plotf(nd):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-070.png
% The following is a simple demonstration of the function. The user can draw over the plot
% window, leaving a trace of points.
>function dragtest ...
$  plot2d(none,r=1,title="Drag with the mouse, or press any key!");
$  start=0;
$  repeat
$    {flag,m,time}=mousedrag();
$    if flag==0 then return; endif;
$    if flag==2 then
$      hold on; mark(m[1],m[2]); hold off;
$    endif;
$  end
$endfunction
>dragtest // lihat hasilnya dan cobalah lakukan!
% ** Gaya Plot 2D
% 
% Secara default, EMT menghitung tick sumbu otomatis dan menambahkan
% label ke setiap tick. Ini dapat diubah dengan parameter grid. Gaya
% default sumbu dan label dapat diubah. Selain itu, label dan judul
% dapat ditambahkan secara manual. Untuk menyetel ulang ke gaya default,
% gunakan reset().
>aspect();
>figure(3,4); ...
> figure(1); plot2d("x^3-x",grid=0); ... // no grid, frame or axis
> figure(2); plot2d("x^3-x",grid=1); ... // x-y-axis
> figure(3); plot2d("x^3-x",grid=2); ... // default ticks
> figure(4); plot2d("x^3-x",grid=3); ... // x-y- axis with labels inside
> figure(5); plot2d("x^3-x",grid=4); ... // no ticks, only labels
> figure(6); plot2d("x^3-x",grid=5); ... // default, but no margin
> figure(7); plot2d("x^3-x",grid=6); ... // axes only
> figure(8); plot2d("x^3-x",grid=7); ... // axes only, ticks at axis
> figure(9); plot2d("x^3-x",grid=8); ... // axes only, finer ticks at axis
> figure(10); plot2d("x^3-x",grid=9); ... // default, small ticks inside
> figure(11); plot2d("x^3-x",grid=10); ...// no ticks, axes only
> figure(0):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-071.png
% The parameter <frame switches off the frame, and framecolor=blue sets the frame to a
% blue color.
% 
% If you want your own ticks, you can use style=0, and add everything later.
>aspect(1.5); 
>plot2d("x^3-x",grid=0); // plot
>frame; xgrid([-1,0,1]); ygrid(0): // add frame and grid
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-072.png
% For the plot title and labels of the axes, see the following example.
>plot2d("exp(x)",-1,1);
>textcolor(black); // set the text color to black
>title(latex("y=e^x")); // title above the plot
>xlabel(latex("x")); // "x" for x-axis
>ylabel(latex("y"),>vertical); // vertical "y" for y-axis
>label(latex("(0,1)"),0,1,color=blue): // label a point
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-073.png
% The axis can be drawn separately with xaxis() and yaxis().
>plot2d("x^3-x",<grid,<frame);
>xaxis(0,xx=-2:1,style="->"); yaxis(0,yy=-5:5,style="->"):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-074.png
% Text on the plot can be set with label(). In the following example, "lc" means
% lower center. It sets the position of the label relative to the plot coordinates.
>function f(x) &= x^3-x

                                 3
                                x  - x

>plot2d(f,-1,1,>square);
>x0=fmin(f,0,1); // compute point of minimum
>label("Rel. Min.",x0,f(x0),pos="lc"): // add a label there
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-075.png
% There are also text boxes.
>plot2d(&f(x),-1,1,-2,2); // function
>plot2d(&diff(f(x),x),>add,style="--",color=red); // derivative
>labelbox(["f","f'"],["-","--"],[black,red]): // label box
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-076.png
>plot2d(["exp(x)","1+x"],color=[black,blue],style=["-","-.-"]):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-077.png
>gridstyle("->",color=gray,textcolor=gray,framecolor=gray);  ...
> plot2d("x^3-x",grid=1);   ...
> settitle("y=x^3-x",color=black); ...
> label("x",2,0,pos="bc",color=gray);  ...
> label("y",0,6,pos="cl",color=gray); ...
> reset():
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-078.png
% For even more control, the x-axis and the y-axis can be done manually.
% 
% Perintah fullwindow() memperluas jendela plot karena kita tidak lagi
% memerlukan tempat untuk label di luar jendela plot. Gunakan
% shrinkwindow() atau reset() untuk menyetel ulang ke default.
>fullwindow; ...
> gridstyle(color=darkgray,textcolor=darkgray); ...
> plot2d(["2^x","1","2^(-x)"],a=-2,b=2,c=0,d=4,<grid,color=4:6,<frame); ...
> xaxis(0,-2:1,style="->"); xaxis(0,2,"x",<axis); ...
> yaxis(0,4,"y",style="->"); ...
> yaxis(-2,1:4,>left); ...
> yaxis(2,2^(-2:2),style=".",<left); ...
> labelbox(["2^x","1","2^-x"],colors=4:6,x=0.8,y=0.2); ...
> reset:
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-079.png
% Here is another example, where Unicode strings are used and axes
% outside the plot area.
>aspect(1.5); 
>plot2d(["sin(x)","cos(x)"],0,2pi,color=[red,green],<grid,<frame); ...
> xaxis(-1.1,(0:2)*pi,xt=["0",u"&pi;",u"2&pi;"],style="-",>ticks,>zero);  ...
> xgrid((0:0.5:2)*pi,<ticks); ...
> yaxis(-0.1*pi,-1:0.2:1,style="-",>zero,>grid); ...
> labelbox(["sin","cos"],colors=[red,green],x=0.5,y=0.2,>left); ...
> xlabel(u"&phi;"); ylabel(u"f(&phi;)"):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-080.png
% * Merencanakan Data 2D
% 
% Jika x dan y adalah vektor data, maka data tersebut akan digunakan
% sebagai koordinat x dan y pada suatu kurva. Dalam hal ini, a, b, c,
% dan d, atau radius r dapat ditentukan, atau jendela plot akan
% menyesuaikan secara otomatis dengan data. Alternatifnya, >persegi
% dapat
%% diatur untuk mempertahankan rasio aspek persegi.
% 
% Merencanakan ekspresi hanyalah singkatan dari plot data. Untuk plot
% data, Anda memerlukan satu atau beberapa baris nilai x, dan satu atau
% beberapa baris nilai y. Dari rentang dan nilai x, fungsi plot2d akan
% menghitung data yang akan diplot, secara default dengan evaluasi
%% fungsi yang adaptif. Untuk plot titik gunakan ">titik", untuk garis
% dan titik campuran gunakan ">addpoints".
% 
% Tapi Anda bisa memasukkan data secara langsung.
% 
% - Gunakan vektor baris untuk x dan y untuk satu fungsi.
%% - Matriks untuk x dan y diplot baris demi baris.
% 
% Berikut adalah contoh dengan satu baris untuk x dan y.
>x=-10:0.1:10; y=exp(-x^2)*x; plot2d(x,y):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-081.png
% Data juga dapat diplot sebagai poin. Gunakan points=true untuk ini.
% Plotnya berfungsi seperti poligon, tetapi hanya menggambar.
% 
% >p=polyfit(xdata,ydata,1); // dapatkan garis regresi
%% >plot2d("polyval(p,x)",>tambahkan,warna=merah): // tambahkan plot
% garis
%% sudut.
% 
%  style="...": Select from "[]", "<>", "o", ".", "..", "+", "*", "[]#",
% "<>#", "o#", "..#", "#", "|".
% 
% Untuk memplot kumpulan titik, gunakan >titik. Jika warna merupakan
% vektor warna, maka setiap titik mendapat warna yang berbeda. Untuk
% matriks koordinat dan vektor kolom, warna diterapkan pada baris
% matriks.
% 
% he parameter >addpoints adds points to line segments for plots of
% data.
>xdata=[1,1.5,2.5,3,4]; ydata=[3,3.1,2.8,2.9,2.7]; // data
>plot2d(xdata,ydata,a=0.5,b=4.5,c=2.5,d=3.5,style="."); // lines
>plot2d(xdata,ydata,>points,>add,style="o"): // add points
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-082.png
>p=polyfit(xdata,ydata,1); // get regression line
>plot2d("polyval(p,x)",>add,color=red): // add plot of line
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-083.png
% * Menggambar Daerah Yang Dibatasi Kurva
% 
% Plot data sebenarnya berbentuk poligon. Kita juga dapat memplot kurva
% atau kurva
% 
% - filled=true fills the plot.
%% - style="...": Select from "#", "/", "\", "\/".
%% - fillcolor: See above for available colors.
% 
% Warna isian ditentukan oleh argumen "fillcolor", dan pada <outline
% opsional, mencegah menggambar ary terikat untuk semua gaya kecuali
% gaya default.
>t=linspace(0,2pi,1000); // parameter for curve
>x=sin(t)*exp(t/pi); y=cos(t)*exp(t/pi); // x(t) and y(t)
>figure(1,2); aspect(16/9)
>figure(1); plot2d(x,y,r=10); // plot curve
>figure(2); plot2d(x,y,r=10,>filled,style="/",fillcolor=red); // fill curve
>figure(0):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-084.png
% Dalam contoh berikut kita memplot elips terisi dan dua segi enam
% terisi menggunakan kurva tertutup dengan 6 titik dengan gaya isian
% berbeda.
%% ills the plot.
%% - style="...": Select from "#", "/", "\", "\/".
%% - fillcolor: See above for available colors.
>x=linspace(0,2pi,1000); plot2d(sin(x),cos(x)*0.5,r=1,>filled,style="/"):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-085.png
>t=linspace(0,2pi,6); ...
>plot2d(cos(t),sin(t),>filled,style="/",fillcolor=red,r=1.2):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-086.png
>t=linspace(0,2pi,6); plot2d(cos(t),sin(t),>filled,style="#"):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-087.png
% Another example is a septagon, which we create with 7 points on the unit circle.
>t=linspace(0,2pi,7);  ...
> plot2d(cos(t),sin(t),r=1,>filled,style="/",fillcolor=red):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-088.png
% The following is the set of the maximal value of four linear conditions less than or
% equal 3. This is A[k].v<=3 for all rows of A. To get nice corners, we use n relatively
% large.
>A=[2,1;1,2;-1,0;0,-1];
>function f(x,y) := max([x,y].A');
>plot2d("f",r=4,level=[0;3],color=green,n=111):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-089.png
% The main point of the matrix language is that it allows to generate tables of
% functions easily.
>t=linspace(0,2pi,1000); x=cos(3*t); y=sin(4*t);
% Kami sekarang memiliki nilai vektor x dan y. plot2d() dapat memplot
% nilai-nilai ini sebagai kurva yang menghubungkan titik-titik. Plotnya
% bisa diisi. Dalam hal ini hasil yang bagus diperoleh karena adanya
% aturan lilitan yang digunakan untuk pengisian.
>plot2d(x,y,<grid,<frame,>filled):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-090.png
% 
% Vektor interval diplot terhadap nilai x sebagai wilayah terisi antara
% nilai interval bawah dan atas.
% 
% Hal ini dapat berguna untuk memplot kesalahan perhitungan. Namun hal
% ini juga dapat digunakan untuk memetakan kesalahan statistik.
>t=0:0.1:1; ...
> plot2d(t,interval(t-random(size(t)),t+random(size(t))),style="|");  ...
> plot2d(t,t,add=true):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-091.png
% Jika x adalah vektor yang diurutkan, dan y adalah vektor interval,
% maka plot2d akan memplot rentang interval yang terisi pada bidang.
% Gaya isiannya sama dengan gaya poligon.
>t=-1:0.01:1; x=~t-0.01,t+0.01~; y=x^3-x;
>plot2d(t,y):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-092.png
% Dimungkinkan untuk mengisi wilayah nilai untuk fungsi tertentu. Untuk
% ini, level harus berupa matriks 2xn. Baris pertama adalah batas bawah
%%  dan baris kedua berisi batas atas.
>expr := "2*x^2+x*y+3*y^4+y"; // define an expression f(x,y)
>plot2d(expr,level=[0;1],style="-",color=blue): // 0 <= f(x,y) <= 1
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-093.png
%% We can also fill ranges of values like
% 
% latex: -1 \le (x^2+y^2)^2-x^2+y^2 \le 0.
% 
>plot2d("(x^2+y^2)^2-x^2+y^2",r=1.2,level=[-1;0],style="/"):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-094.png
>plot2d("cos(x)","sin(x)^3",xmin=0,xmax=2pi,>filled,style="/"):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-095.png
% * Grafik Fungsi Parametrik
% 
% Nilai x tidak perlu diurutkan. (x,y) hanya menggambarkan sebuah kurva.
% Jika x diurutkan, kurva tersebut merupakan grafik suatu fungsi.
% 
% 
% n the following example, we plot the spiral
% 
% latex: \gamma(t) = t \cdot (\cos(2\pi t),\sin(2\pi t))
% 
% Kita perlu menggunakan banyak titik untuk tampilan yang halus atau
% fungsi adaptif() untuk mengevaluasi ekspresi (lihat fungsi adaptif()
% untuk lebih jelasnya).
>t=linspace(0,1,1000); ...
>plot2d(t*cos(2*pi*t),t*sin(2*pi*t),r=1):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-096.png
% Sebagai alternatif, dimungkinkan untuk menggunakan dua ekspresi untuk
% kurva. Berikut ini plot kurva yang sama seperti di atas.
>plot2d("x*cos(2*pi*x)","x*sin(2*pi*x)",xmin=0,xmax=1,r=1):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-097.png
>t=linspace(0,1,1000); r=exp(-t); x=r*cos(2pi*t); y=r*sin(2pi*t);
>plot2d(x,y,r=1):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-098.png
% In the next example, we plot the curve
% 
% latex: \gamma(t) = (r(t) \cos(t), r(t) \sin(t))
% 
% with
% 
% latex: r(t) = 1 + \dfrac{\sin(3t)}{2}.
>t=linspace(0,2pi,1000); r=1+sin(3*t)/2; x=r*cos(t); y=r*sin(t); ...
>plot2d(x,y,>filled,fillcolor=red,style="/",r=1.5):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-099.png
% * Menggambar Grafik Bilangan Kompleks
% 
% Serangkaian bilangan kompleks juga dapat diplot. Kemudian titik-titik
% grid akan dihubungkan. Jika sejumlah garis kisi ditentukan (atau
%% vektor garis kisi 1x2) dalam argumen cgrid, hanya garis kisi tersebut
% yang terlihat.
% 
% Matriks bilangan kompleks secara otomatis akan diplot sebagai
% kisi-kisi pada bidang kompleks.
% 
% ada contoh berikut, kita memplot gambar lingkaran satuan di bawah
% fungsi eksponensial. Parameter cgrid menyembunyikan beberapa kurva
% grid.
>aspect(); r=linspace(0,1,50); a=linspace(0,2pi,80)'; z=r*exp(I*a);...
>plot2d(z,a=-1.25,b=1.25,c=-1.25,d=1.25,cgrid=10):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-100.png
>aspect(1.25); r=linspace(0,1,50); a=linspace(0,2pi,200)'; z=r*exp(I*a);
>plot2d(exp(z),cgrid=[40,10]):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-101.png
>r=linspace(0,1,10); a=linspace(0,2pi,40)'; z=r*exp(I*a);
>plot2d(exp(z),>points,>add):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-102.png
% Vektor bilangan kompleks secara otomatis diplot sebagai kurva pada
% bidang kompleks dengan bagian nyata dan bagian imajiner.
% 
% 
% n the example, we plot the unit circle with
% 
% latex: \gamma(t) = e^{it}
>t=linspace(0,2pi,1000); ...
>plot2d(exp(I*t)+exp(4*I*t),r=2):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-103.png
% * Plot Statistik
% 
% Ada banyak fungsi yang dikhususkan pada plot statistik. Salah satu
% plot yang sering digunakan adalah plot kolom.
% 
% Jumlah kumulatif dari nilai terdistribusi normal 0-1 menghasilkan
% jalan acak.
>plot2d(cumsum(randnormal(1,1000))):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-104.png
% Using two rows shows a walk in two dimensions.
>X=cumsum(randnormal(2,1000)); plot2d(X[1],X[2]):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-105.png
>columnsplot(cumsum(random(10)),style="/",color=blue):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-106.png
% It can also show strings as labels.
>months=["Jan","Feb","Mar","Apr","May","Jun", ...
>  "Jul","Aug","Sep","Oct","Nov","Dec"];
>values=[10,12,12,18,22,28,30,26,22,18,12,8];
>columnsplot(values,lab=months,color=red,style="-");
>title("Temperature"):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-107.png
>k=0:10;
>plot2d(k,bin(10,k),>bar):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-108.png
>plot2d(k,bin(10,k)); plot2d(k,bin(10,k),>points,>add):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-109.png
>plot2d(normal(1000),normal(1000),>points,grid=6,style=".."):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-110.png
>plot2d(normal(1,1000),>distribution,style="O"):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-111.png
>plot2d("qnormal",0,5;2.5,0.5,>filled):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-112.png
% To plot an experimental statistical distribution, you can use distribution=n with
% plot2d.
>w=randexponential(1,1000); // exponential distribution
>plot2d(w,>distribution): // or distribution=n with n intervals
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-113.png
% Or you can compute the distribution from the data and plot the result with >bar in
% plot3d, or with a column plot.
>w=normal(1000); // 0-1-normal distribution
>{x,y}=histo(w,10,v=[-6,-4,-2,-1,0,1,2,4,6]); // interval bounds v
>plot2d(x,y,>bar):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-114.png
% The statplot() function sets the style with a simple string.
>statplot(1:10,cumsum(random(10)),"b"):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-115.png
>n=10; i=0:n; ...
>plot2d(i,bin(n,i)/2^n,a=0,b=10,c=0,d=0.3); ...
>plot2d(i,bin(n,i)/2^n,points=true,style="ow",add=true,color=blue):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-116.png
% Moreover, data can be plotted as bars. In this case, x should be sorted and one
% element longer than y. The bars will extend from x[i] to x[i+1] with values y[i]. If x
% has the same size as y, it will be extended by one element with the last spacing.
% 
% Fill styles can be used just as above.
>n=10; k=bin(n,0:n); ...
>plot2d(-0.5:n+0.5,k,bar=true,fillcolor=lightgray):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-117.png
% The data for bar plots (bar=1) and histograms (histogram=1) can either be explicitly
% given in xv and yv, or can be computed from an empirical distribution in xv with
% >distribution (or distribution=n). Histograms of xv values will be computed
% automatically with >histogram. If >even is specified, the xv values will be counted in
% integer intervals.
>plot2d(normal(10000),distribution=50):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-118.png
>k=0:10; m=bin(10,k); x=(0:11)-0.5; plot2d(x,m,>bar):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-119.png
>columnsplot(m,k):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-120.png
>plot2d(random(600)*6,histogram=6):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-121.png
% For distributions, there is the parameter distribution=n, which counts values
% automatically and prints the relative distribution with n sub-intervals.
>plot2d(normal(1,1000),distribution=10,style="\/"):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-122.png
% With the parameter even=true, this will use integer intervals.
>plot2d(intrandom(1,1000,10),distribution=10,even=true):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-123.png
% Note that there are many statistical plots, which might be useful. Have a look at the
% tutorial about statistics.
>columnsplot(getmultiplicities(1:6,intrandom(1,6000,6))):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-124.png
>plot2d(normal(1,1000),>distribution); ...
>  plot2d("qnormal(x)",color=red,thickness=2,>add):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-125.png
% There are also many special plots for statistics. A boxplot shows the quartiles of
% this distribution and lots of outliers. By definition, outliers in a boxplot are data
% which exceed 1.5 times the middle 50% range of the plot.
>M=normal(5,1000); boxplot(quartiles(M)):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-126.png
% * Implicit Functions
% 
% Implicit plots show level lines solving f(x,y)=level, where "level" can be a single
% value or a vector of values. If level="auto", there will be nc level lines, which will
% spread between the minimum and the maximum of the function evenly. Darker or lighter
% color can be added with >hue to indicate value of the function. For implicit
% functions, xv must be a function or an expression of the parameters x and y, or,
% alternatively, xv can be a matrix of values.
% 
% Euler can mark the level lines
% 
% latex: f(x,y) = c
% 
% of any function.
% 
% To draw the set f(x,y)=c for one or more constants c you can use plot2d() with its
% implicit plots in the plane. The parameter for c is level=c, where c can be vector of
% level lines. Additionally, a color scheme can be drawn in the background to indicate
% the value of the function for each point in the plot. The parameter "n" determines the
% fineness of the plot.
>aspect(1.5); 
>plot2d("x^2+y^2-x*y-x",r=1.5,level=0,contourcolor=red):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-127.png
>expr := "2*x^2+x*y+3*y^4+y"; // define an expression f(x,y)
>plot2d(expr,level=0): // Solutions of f(x,y)=0
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-128.png
>plot2d(expr,level=0:0.5:20,>hue,contourcolor=white,n=200): // nice
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-129.png
>plot2d(expr,level=0:0.5:20,>hue,>spectral,n=200,grid=4): // nicer
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-130.png
% This works for data plots too. But you will have to specify the ranges
%% for the axis labels.
>x=-2:0.05:1; y=x'; z=expr(x,y);
>plot2d(z,level=0,a=-1,b=2,c=-2,d=1,>hue):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-131.png
>plot2d("x^3-y^2",>contour,>hue,>spectral):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-132.png
>plot2d("x^3-y^2",level=0,contourwidth=3,>add,contourcolor=red):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-133.png
>z=z+normal(size(z))*0.2;
>plot2d(z,level=0.5,a=-1,b=2,c=-2,d=1):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-134.png
>plot2d(expr,level=[0:0.2:5;0.05:0.2:5.05],color=lightgray):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-135.png
>plot2d("x^2+y^3+x*y",level=1,r=4,n=100):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-136.png
>plot2d("x^2+2*y^2-x*y",level=0:0.1:10,n=100,contourcolor=white,>hue):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-137.png
% It is also possible to fill the set
% 
% latex: a \le f(x,y) \le b
% 
% with a level range.
% 
% It is possible to fill regions of values for a specific function. For this, level must
% be a 2xn matrix. The first row are the lower bounds and the second row contains the
% upper bounds.
>plot2d(expr,level=[0;1],style="-",color=blue): // 0 <= f(x,y) <= 1
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-138.png
% 
% Implicit plots can also show ranges of levels. Then level must be a 2xn matrix of
% level intervals, where the first row contains the start and the second row the end of
% each interval. Alternatively, a simple row vector can be used for level, and a
% parameter dl extends the level values to intervals.
>plot2d("x^4+y^4",r=1.5,level=[0;1],color=blue,style="/"):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-139.png
>plot2d("x^2+y^3+x*y",level=[0,2,4;1,3,5],style="/",r=2,n=100):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-140.png
>plot2d("x^2+y^3+x*y",level=-10:20,r=2,style="-",dl=0.1,n=100):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-141.png
>plot2d("sin(x)*cos(y)",r=pi,>hue,>levels,n=100):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-142.png
% It is also possible to mark a region
% 
% latex: a \le f(x,y) \le b.
% 
% This is done by adding a level with two rows.
>plot2d("(x^2+y^2-1)^3-x^2*y^3",r=1.3, ...
>  style="#",color=red,<outline, ...
>  level=[-2;0],n=100):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-143.png
% 
% It is possible to specify a specific level. E.g., we can plot the solution of an
% equation like
% 
% latex: x^3-xy+x^2y^2=6
>plot2d("x^3-x*y+x^2*y^2",r=6,level=1,n=100):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-144.png
>function starplot1 (v, style="/", color=green, lab=none) ...
$  if !holding() then clg; endif;
$  w=window(); window(0,0,1024,1024);
$  h=holding(1);
$  r=max(abs(v))*1.2;
$  setplot(-r,r,-r,r);
$  n=cols(v); t=linspace(0,2pi,n);
$  v=v|v[1]; c=v*cos(t); s=v*sin(t);
$  cl=barcolor(color); st=barstyle(style);
$  loop 1 to n
$    polygon([0,c[#],c[#+1]],[0,s[#],s[#+1]],1);
$    if lab!=none then
$      rlab=v[#]+r*0.1;
$      {col,row}=toscreen(cos(t[#])*rlab,sin(t[#])*rlab);
$      ctext(""+lab[#],col,row-textheight()/2);
$    endif;
$  end;
$  barcolor(cl); barstyle(st);
$  holding(h);
$  window(w);
$endfunction
% There is no grid or axis ticks here. Moreover, we use the full window for the plot.
% 
% We call reset before we test this plot to restore the graphics defaults. This is not
% necessary, if you are sure that your plot works.
>reset; starplot1(normal(1,10)+5,color=red,lab=1:10):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-145.png
% Sometimes, you may want to plot something that plot2d cannot do, but almost.
% 
% In the following function, we do a logarithmic impulse plot. plot2d can do logarithmic
% plots, but not for impulse bars.
>function logimpulseplot1 (x,y) ...
$  {x0,y0}=makeimpulse(x,log(y)/log(10));
$  plot2d(x0,y0,>bar,grid=0);
$  h=holding(1);
$  frame();
$  xgrid(ticks(x));
$  p=plot();
$  for i=-10 to 10;
$    if i<=p[4] and i>=p[3] then
$       ygrid(i,yt="10^"+i);
$    endif;
$  end;
$  holding(h);
$endfunction
% Let us test it with exponentially distributed values.
>aspect(1.5); x=1:10; y=-log(random(size(x)))*200; ...
>logimpulseplot1(x,y):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-146.png
% Let us animate a 2D curve using direct plots. The plot(x,y) command
% simply plots a curve into the plot window. setplot(a,b,c,d) sets this
% window.
% 
% The wait(0) function forces the plot to appear on the graphics
% windows. Otherwise, the redraw takes place in sparse time intervals.
>function animliss (n,m) ...
$t=linspace(0,2pi,500);
$f=0;
$c=framecolor(0);
$l=linewidth(2);
$setplot(-1,1,-1,1);
$repeat
$  clg;
$  plot(sin(n*t),cos(m*t+f));
$  wait(0);
$  if testkey() then break; endif;
$  f=f+0.02;
$end;
$framecolor(c);
$linewidth(l);
$endfunction
% Press any key to stop this animation.
>animliss(2,3); // lihat hasilnya, jika sudah puas, tekan ENTER
% * Logarithmic Plots
% 
% EMT uses the "logplot" parameter for logarithmic scales.
%% Logarithmic plots can be plotted either using a logarithmic scale in y with logplot=1,
% or using logarithmic scales in x and y with logplot=2, or in x with logplot=3.
% 
%  - logplot=1: y-logarithmic
%%  - logplot=2: x-y-logarithmic
%%  - logplot=3: x-logarithmic
>plot2d("exp(x^3-x)*x^2",1,5,logplot=1):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-147.png
>plot2d("exp(x+sin(x))",0,100,logplot=1):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-148.png
>plot2d("exp(x+sin(x))",10,100,logplot=2):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-149.png
>plot2d("gamma(x)",1,10,logplot=1):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-150.png
>plot2d("log(x*(2+sin(x/100)))",10,1000,logplot=3):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-151.png
% 
% This does also work with data plots.
>x=10^(1:20); y=x^2-x;
>plot2d(x,y,logplot=2):
 %image% EMT4Plot2D-Naela Rizqy Arofah-22305144042-152.png
>
>
>
% * Rujukan Lengkap Fungsi plot2d()
% 
%%   function plot2d (xv, yv, btest, a, b, c, d, xmin, xmax, r, n,  ..
%%   logplot, grid, frame, framecolor, square, color, thickness, style, ..
%%   auto, add, user, delta, points, addpoints, pointstyle, bar, histogram,  ..
%%   distribution, even, steps, own, adaptive, hue, level, contour,  ..
%%   nc, filled, fillcolor, outline, title, xl, yl, maps, contourcolor, ..
%%   contourwidth, ticks, margin, clipping, cx, cy, insimg, spectral,  ..
%%   cgrid, vertical, smaller, dl, niveau, levels)
% 
% Multipurpose plot function for plots in the plane (2D plots). This function can do
% plots of functions of one variables, data plots, curves in the plane, bar plots, grids
% of complex numbers, and implicit plots of functions of two variables.
% 
% Parameters
% 
%% x,y       : equations, functions or data vectors
%% a,b,c,d   : Plot area (default a=-2,b=2)
%% r         : if r is set, then a=cx-r, b=cx+r, c=cy-r, d=cy+r
%%             r can be a vector [rx,ry] or a vector [rx1,rx2,ry1,ry2].
%% xmin,xmax : range of the parameter for curves
%% auto      : Determine y-range automatically (default)
%% square    : if true, try to keep square x-y-ranges
%% n         : number of intervals (default is adaptive)
%% grid      : 0 = no grid and labels,
%%             1 = axis only,
%%             2 = normal grid (see below for the number of grid lines)
%%             3 = inside axis
%%             4 = no grid
%%             5 = full grid including margin
%%             6 = ticks at the frame
%%             7 = axis only
%%             8 = axis only, sub-ticks
%% frame     : 0 = no frame
%% framecolor: color of the frame and the grid
%% margin    : number between 0 and 0.4 for the margin around the plot
%% color     : Color of curves. If this is a vector of colors,
%%             it will be used for each row of a matrix of plots. In the case of
%%             point plots, it should be a column vector. If a row vector or a
%%             full matrix of colors is used for point plots, it will be used for
%%             each data point.
%% thickness : line thickness for curves
%%             This value can be smaller than 1 for very thin lines.
%% style     : Plot style for lines, markers, and fills.
%%             For points use
%%             "[]", "<>", ".", "..", "...",
%%             "*", "+", "|", "-", "o"
%%             "[]#", "<>#", "o#" (filled shapes)
%%             "[]w", "<>w", "ow" (non-transparent)
%%             For lines use
%%             "-", "--", "-.", ".", ".-.", "-.-", "->"
%%             For filled polygons or bar plots use
%%             "#", "#O", "O", "/", "\", "\/",
%%             "+", "|", "-", "t"
%% points    : plot single points instead of line segments
%% addpoints : if true, plots line segments and points
%% add       : add the plot to the existing plot
%% user      : enable user interaction for functions
%% delta     : step size for user interaction
%% bar       : bar plot (x are the interval bounds, y the interval values)
%% histogram : plots the frequencies of x in n subintervals
%% distribution=n : plots the distribution of x with n subintervals
%% even      : use inter values for automatic histograms.
%% steps     : plots the function as a step function (steps=1,2)
%% adaptive  : use adaptive plots (n is the minimal number of steps)
%% level     : plot level lines of an implicit function of two variables
%% outline   : draws boundary of level ranges.
% 
%% If the level value is a 2xn matrix, ranges of levels will be drawn
%% in the color using the given fill style. If outline is true, it
%% will be drawn in the contour color. Using this feature, regions of
%% f(x,y) between limits can be marked.
% 
%% hue       : add hue color to the level plot to indicate the function
%%             value
%% contour   : Use level plot with automatic levels
%% nc        : number of automatic level lines
%% title     : plot title (default "")
%% xl, yl    : labels for the x- and y-axis
%% smaller   : if >0, there will be more space to the left for labels.
%% vertical  :
%%   Turns vertical labels on or off. This changes the global variable
%%   verticallabels locally for one plot. The value 1 sets only vertical
%%   text, the value 2 uses vertical numerical labels on the y axis.
%% filled    : fill the plot of a curve
%% fillcolor : fill color for bar and filled curves
%% outline   : boundary for filled polygons
%% logplot   : set logarithmic plots
%%             1 = logplot in y,
%%             2 = logplot in xy,
%%             3 = logplot in x
%% own       :
%%   A string, which points to an own plot routine. With >user, you get
%%   the same user interaction as in plot2d. The range will be set
%%   before each call to your function.
%% maps      : map expressions (0 is faster), functions are always mapped.
%% contourcolor : color of contour lines
%% contourwidth : width of contour lines
%% clipping  : toggles the clipping (default is true)
%% title     :
%%   This can be used to describe the plot. The title will appear above
%%   the plot. Moreover, a label for the x and y axis can be added with
%%   xl="string" or yl="string". Other labels can be added with the
%%   functions label() or labelbox(). The title can be a unicode
%%   string or an image of a Latex formula.
%% cgrid     :
%%   Determines the number of grid lines for plots of complex grids.
%%   Should be a divisor of the the matrix size minus 1 (number of
%%   subintervals). cgrid can be a vector [cx,cy].
% 
% Overview
% 
% The function can plot
% 
% - expressions, call collections or functions of one variable,
%% - parametric curves,
%% - x data against y data,
%% - implicit functions,
%% - bar plots,
%% - complex grids,
%% - polygons.
% 
% If a function or expression for xv is given, plot2d() will compute
%% values in the given range using the function or expression. The
%% expression must be an expression in the variable x. The range must
%% be defined in the parameters a and b unless the default range
%% [-2,2] should be used. The y-range will be computed automatically,
%% unless c and d are specified, or a radius r, which yields the range
%% [-r,r] for x and y. For plots of functions, plot2d will use an
%% adaptive evaluation of the function by default. To speed up the
%% plot for complicated functions, switch this off with <adaptive, and
%% optionally decrease the number of intervals n. Moreover, plot2d()
%% will by default use mapping. I.e., it will compute the plot element
%% for element. If your expression or your functions can handle a
%% vector x, you can switch that off with <maps for faster evaluation.
% 
% Note that adaptive plots are always computed element for element. 
%% If functions or expressions for both xv and for yv are specified,
%% plot2d() will compute a curve with the xv values as x-coordinates
%% and the yv values as y-coordinates. In this case, a range should be
%% defined for the parameter using xmin, xmax. Expressions contained
%% in strings must always be expressions in the parameter variable x.
